- name: Render user-data for autoinstall
  template:
    src: user-data.yaml.j2
    dest: '{{ role_path }}/files/data/ubuntu/user-data'
    mode: 0644
- name: Render machine specific init config
  template:
    src: autoinstall.yaml.j2
    dest: "{{ role_path }}/files/data/autoinstall.d/{{ hostvars[item]['mac'] }}.yaml"
    mode: 0644
  loop: "{{ groups['metal'] }}"
- name: Render dnsmasq server config
  template:
    src: dnsmasq.conf.j2
    dest: '{{ role_path }}/files/data/configs/dnsmasq.conf'
    mode: 0644
- name: Render grubx64 config
  template:
    src: grub.cfg.j2
    dest: '{{ role_path }}/files/data/configs/grub.cfg'
    mode: 0644
- name: Download ubuntu iso image
  ansible.builtin.get_url:
    url: '{{ ubuntu_release_iso }}'
    dest: '{{ role_path }}/files/data/ubuntu/{{ ubuntu_release_iso | basename }}'
  register: iso
- name: Extract the ISO
  command:
    cmd: xorriso -osirrox on -indev {{ iso.dest }} -extract / {{ role_path }}/files/data/os
    creates: '{{ role_path }}/files/data/os/.treeinfo'
- name: Add write permission to os dir
  ansible.builtin.command: chmod u+w -R {{ role_path }}/files/data/os
- name: Copy initrd
  ansible.builtin.copy:
    src: '{{ role_path }}/files/data/os/casper/initrd'
    dest: '{{ role_path }}/files/data/ubuntu/initrd'
- name: Copy vmlinuz
  ansible.builtin.copy:
    src: '{{ role_path }}/files/data/os/casper/vmlinuz'
    dest: '{{ role_path }}/files/data/ubuntu/vmlinuz'
- name: Start docker-compose pxe server
  community.docker.docker_compose:
    project_src: '{{ role_path }}/files/'
    files:
      - docker-compose.yaml
    state: present
    restarted: true
    build: true
- name: Wake on lan
  community.general.wakeonlan:
    mac: "{{ hostvars[item]['mac'] }}"
    broadcast: '{{ ansible_default_ipv4.broadcast }}'
  delegate_to: localhost
  loop: "{{ groups['metal'] }}"
- name: Check server ready
  command: ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no ubuntu@{{ hostvars[item]['ansible_host'] }} -i {{ ssh_private_key_file }} 'echo ready'
  register: echo_output
  until: '"ready"  in echo_output.stdout'
  retries: 20
  delay: 60
  loop: "{{ groups['metal'] }}"
  delegate_to: localhost
